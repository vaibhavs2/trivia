// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Question-Modal renders correctly  when app-offline, modal visible 1`] = `
<Modal
  animationType="none"
  deviceHeight={null}
  deviceWidth={null}
  hardwareAccelerated={false}
  hideModalContentWhileAnimating={false}
  onBackdropPress={[Function]}
  onModalHide={[Function]}
  onModalWillHide={[Function]}
  onModalWillShow={[Function]}
  onRequestClose={[Function]}
  panResponderThreshold={4}
  scrollHorizontal={false}
  scrollOffset={0}
  scrollOffsetMax={0}
  scrollTo={null}
  statusBarTranslucent={false}
  supportedOrientations={
    Array [
      "portrait",
      "landscape",
    ]
  }
  swipeThreshold={100}
  transparent={true}
  visible={true}
>
  <View
    accessible={true}
    focusable={true}
    forwardedRef={[Function]}
    onClick={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "backgroundColor": "white",
        "bottom": 0,
        "height": 1334,
        "left": 0,
        "opacity": 0,
        "position": "absolute",
        "right": 0,
        "top": 0,
        "width": 750,
      }
    }
  />
  <View
    deviceHeight={null}
    deviceWidth={null}
    forwardedRef={[Function]}
    hideModalContentWhileAnimating={false}
    onBackdropPress={[Function]}
    onModalHide={[Function]}
    onModalWillHide={[Function]}
    onModalWillShow={[Function]}
    panResponderThreshold={4}
    pointerEvents="box-none"
    scrollHorizontal={false}
    scrollOffset={0}
    scrollOffsetMax={0}
    scrollTo={null}
    statusBarTranslucent={false}
    style={
      Object {
        "flex": 1,
        "justifyContent": "center",
        "margin": 37.5,
        "transform": Array [
          Object {
            "translateX": 750,
          },
        ],
      }
    }
    supportedOrientations={
      Array [
        "portrait",
        "landscape",
      ]
    }
    swipeThreshold={100}
  >
    <RCTSafeAreaView
      emulateUnlessSupported={true}
      style={
        Object {
          "flex": 1,
          "marginVertical": 50,
        }
      }
    >
      <View
        style={
          Object {
            "flexDirection": "row",
            "justifyContent": "center",
          }
        }
      >
        <Text
          style={
            Object {
              "color": "red",
            }
          }
        >
          You don't have Internet connection 
        </Text>
      </View>
      <ActivityIndicator
        animating={true}
        color="#0000ff"
        size="small"
      />
      <Text
        style={
          Object {
            "fontSize": 16,
            "marginBottom": 12,
          }
        }
      >
        <Text
          style={
            Object {
              "fontWeight": "bold",
            }
          }
        >
          Title: 
        </Text>
      </Text>
      <Text
        style={
          Object {
            "fontSize": 16,
            "fontWeight": "bold",
          }
        }
      >
        Question:
      </Text>
      <Text
        style={
          Object {
            "fontSize": 16,
            "height": 120,
          }
        }
      />
      <TextInput
        multiline={true}
        onChangeText={[Function]}
        placeholder="Write your answer here"
        style={
          Object {
            "borderBottomWidth": 1,
            "marginVertical": 20,
            "textAlign": "left",
          }
        }
      />
      <View
        accessibilityRole="button"
        accessible={true}
        collapsable={false}
        focusable={true}
        nativeID="animatedComponent"
        onClick={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "opacity": 1,
          }
        }
      >
        <View
          style={
            Array [
              Object {},
            ]
          }
        >
          <Text
            style={
              Array [
                Object {
                  "color": "#007AFF",
                  "fontSize": 18,
                  "margin": 8,
                  "textAlign": "center",
                },
                Object {
                  "color": "#f194ff",
                },
              ]
            }
          >
            Submit
          </Text>
        </View>
      </View>
      <View
        style={
          Object {
            "height": 12,
          }
        }
      />
    </RCTSafeAreaView>
  </View>
</Modal>
`;

exports[`Question-Modal renders correctly when app-offline, modal invisible 1`] = `
<Modal
  animationType="none"
  deviceHeight={null}
  deviceWidth={null}
  hardwareAccelerated={false}
  hideModalContentWhileAnimating={false}
  onBackdropPress={[Function]}
  onModalHide={[Function]}
  onModalWillHide={[Function]}
  onModalWillShow={[Function]}
  onRequestClose={[Function]}
  panResponderThreshold={4}
  scrollHorizontal={false}
  scrollOffset={0}
  scrollOffsetMax={0}
  scrollTo={null}
  statusBarTranslucent={false}
  supportedOrientations={
    Array [
      "portrait",
      "landscape",
    ]
  }
  swipeThreshold={100}
  transparent={true}
  visible={false}
>
  <View
    accessible={true}
    collapsable={false}
    focusable={true}
    forwardedRef={[Function]}
    nativeID="animatedComponent"
    onClick={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "backgroundColor": "white",
        "bottom": 0,
        "height": 1334,
        "left": 0,
        "opacity": 0,
        "position": "absolute",
        "right": 0,
        "top": 0,
        "width": 750,
      }
    }
  />
  <View
    collapsable={false}
    deviceHeight={null}
    deviceWidth={null}
    forwardedRef={[Function]}
    hideModalContentWhileAnimating={false}
    nativeID="animatedComponent"
    onBackdropPress={[Function]}
    onModalHide={[Function]}
    onModalWillHide={[Function]}
    onModalWillShow={[Function]}
    panResponderThreshold={4}
    pointerEvents="box-none"
    scrollHorizontal={false}
    scrollOffset={0}
    scrollOffsetMax={0}
    scrollTo={null}
    statusBarTranslucent={false}
    style={
      Object {
        "flex": 1,
        "justifyContent": "center",
        "margin": 37.5,
        "transform": Array [
          Object {
            "translateY": 0,
          },
        ],
      }
    }
    supportedOrientations={
      Array [
        "portrait",
        "landscape",
      ]
    }
    swipeThreshold={100}
  >
    <RCTSafeAreaView
      emulateUnlessSupported={true}
      style={
        Object {
          "flex": 1,
          "marginVertical": 50,
        }
      }
    >
      <View
        style={
          Object {
            "flexDirection": "row",
            "justifyContent": "center",
          }
        }
      >
        <Text
          style={
            Object {
              "color": "red",
            }
          }
        >
          You don't have Internet connection 
        </Text>
      </View>
      <ActivityIndicator
        animating={true}
        color="#0000ff"
        size="small"
      />
      <Text
        style={
          Object {
            "fontSize": 16,
            "marginBottom": 12,
          }
        }
      >
        <Text
          style={
            Object {
              "fontWeight": "bold",
            }
          }
        >
          Title: 
        </Text>
      </Text>
      <Text
        style={
          Object {
            "fontSize": 16,
            "fontWeight": "bold",
          }
        }
      >
        Question:
      </Text>
      <Text
        style={
          Object {
            "fontSize": 16,
            "height": 120,
          }
        }
      />
      <TextInput
        multiline={true}
        onChangeText={[Function]}
        placeholder="Write your answer here"
        style={
          Object {
            "borderBottomWidth": 1,
            "marginVertical": 20,
            "textAlign": "left",
          }
        }
      />
      <View
        accessibilityRole="button"
        accessible={true}
        collapsable={false}
        focusable={true}
        nativeID="animatedComponent"
        onClick={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "opacity": 1,
          }
        }
      >
        <View
          style={
            Array [
              Object {},
            ]
          }
        >
          <Text
            style={
              Array [
                Object {
                  "color": "#007AFF",
                  "fontSize": 18,
                  "margin": 8,
                  "textAlign": "center",
                },
                Object {
                  "color": "#f194ff",
                },
              ]
            }
          >
            Submit
          </Text>
        </View>
      </View>
      <View
        style={
          Object {
            "height": 12,
          }
        }
      />
    </RCTSafeAreaView>
  </View>
</Modal>
`;

exports[`Question-Modal renders correctly when app-online, modal invisible 1`] = `
<Modal
  animationType="none"
  deviceHeight={null}
  deviceWidth={null}
  hardwareAccelerated={false}
  hideModalContentWhileAnimating={false}
  onBackdropPress={[Function]}
  onModalHide={[Function]}
  onModalWillHide={[Function]}
  onModalWillShow={[Function]}
  onRequestClose={[Function]}
  panResponderThreshold={4}
  scrollHorizontal={false}
  scrollOffset={0}
  scrollOffsetMax={0}
  scrollTo={null}
  statusBarTranslucent={false}
  supportedOrientations={
    Array [
      "portrait",
      "landscape",
    ]
  }
  swipeThreshold={100}
  transparent={true}
  visible={false}
>
  <View
    accessible={true}
    collapsable={false}
    focusable={true}
    forwardedRef={[Function]}
    nativeID="animatedComponent"
    onClick={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "backgroundColor": "white",
        "bottom": 0,
        "height": 1334,
        "left": 0,
        "opacity": 0,
        "position": "absolute",
        "right": 0,
        "top": 0,
        "width": 750,
      }
    }
  />
  <View
    collapsable={false}
    deviceHeight={null}
    deviceWidth={null}
    forwardedRef={[Function]}
    hideModalContentWhileAnimating={false}
    nativeID="animatedComponent"
    onBackdropPress={[Function]}
    onModalHide={[Function]}
    onModalWillHide={[Function]}
    onModalWillShow={[Function]}
    panResponderThreshold={4}
    pointerEvents="box-none"
    scrollHorizontal={false}
    scrollOffset={0}
    scrollOffsetMax={0}
    scrollTo={null}
    statusBarTranslucent={false}
    style={
      Object {
        "flex": 1,
        "justifyContent": "center",
        "margin": 37.5,
        "transform": Array [
          Object {
            "translateY": 0,
          },
        ],
      }
    }
    supportedOrientations={
      Array [
        "portrait",
        "landscape",
      ]
    }
    swipeThreshold={100}
  >
    <RCTSafeAreaView
      emulateUnlessSupported={true}
      style={
        Object {
          "flex": 1,
          "marginVertical": 50,
        }
      }
    >
      <ActivityIndicator
        animating={true}
        color="#0000ff"
        size="small"
      />
      <Text
        style={
          Object {
            "fontSize": 16,
            "marginBottom": 12,
          }
        }
      >
        <Text
          style={
            Object {
              "fontWeight": "bold",
            }
          }
        >
          Title: 
        </Text>
      </Text>
      <Text
        style={
          Object {
            "fontSize": 16,
            "fontWeight": "bold",
          }
        }
      >
        Question:
      </Text>
      <Text
        style={
          Object {
            "fontSize": 16,
            "height": 120,
          }
        }
      />
      <TextInput
        multiline={true}
        onChangeText={[Function]}
        placeholder="Write your answer here"
        style={
          Object {
            "borderBottomWidth": 1,
            "marginVertical": 20,
            "textAlign": "left",
          }
        }
      />
      <View
        accessibilityRole="button"
        accessible={true}
        collapsable={false}
        focusable={true}
        nativeID="animatedComponent"
        onClick={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "opacity": 1,
          }
        }
      >
        <View
          style={
            Array [
              Object {},
            ]
          }
        >
          <Text
            style={
              Array [
                Object {
                  "color": "#007AFF",
                  "fontSize": 18,
                  "margin": 8,
                  "textAlign": "center",
                },
                Object {
                  "color": "#f194ff",
                },
              ]
            }
          >
            Submit
          </Text>
        </View>
      </View>
      <View
        style={
          Object {
            "height": 12,
          }
        }
      />
    </RCTSafeAreaView>
  </View>
</Modal>
`;

exports[`Question-Modal renders correctly when app-online, modal visible 1`] = `
<Modal
  animationType="none"
  deviceHeight={null}
  deviceWidth={null}
  hardwareAccelerated={false}
  hideModalContentWhileAnimating={false}
  onBackdropPress={[Function]}
  onModalHide={[Function]}
  onModalWillHide={[Function]}
  onModalWillShow={[Function]}
  onRequestClose={[Function]}
  panResponderThreshold={4}
  scrollHorizontal={false}
  scrollOffset={0}
  scrollOffsetMax={0}
  scrollTo={null}
  statusBarTranslucent={false}
  supportedOrientations={
    Array [
      "portrait",
      "landscape",
    ]
  }
  swipeThreshold={100}
  transparent={true}
  visible={true}
>
  <View
    accessible={true}
    focusable={true}
    forwardedRef={[Function]}
    onClick={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "backgroundColor": "white",
        "bottom": 0,
        "height": 1334,
        "left": 0,
        "opacity": 0,
        "position": "absolute",
        "right": 0,
        "top": 0,
        "width": 750,
      }
    }
  />
  <View
    deviceHeight={null}
    deviceWidth={null}
    forwardedRef={[Function]}
    hideModalContentWhileAnimating={false}
    onBackdropPress={[Function]}
    onModalHide={[Function]}
    onModalWillHide={[Function]}
    onModalWillShow={[Function]}
    panResponderThreshold={4}
    pointerEvents="box-none"
    scrollHorizontal={false}
    scrollOffset={0}
    scrollOffsetMax={0}
    scrollTo={null}
    statusBarTranslucent={false}
    style={
      Object {
        "flex": 1,
        "justifyContent": "center",
        "margin": 37.5,
        "transform": Array [
          Object {
            "translateX": 750,
          },
        ],
      }
    }
    supportedOrientations={
      Array [
        "portrait",
        "landscape",
      ]
    }
    swipeThreshold={100}
  >
    <RCTSafeAreaView
      emulateUnlessSupported={true}
      style={
        Object {
          "flex": 1,
          "marginVertical": 50,
        }
      }
    >
      <ActivityIndicator
        animating={true}
        color="#0000ff"
        size="small"
      />
      <Text
        style={
          Object {
            "fontSize": 16,
            "marginBottom": 12,
          }
        }
      >
        <Text
          style={
            Object {
              "fontWeight": "bold",
            }
          }
        >
          Title: 
        </Text>
      </Text>
      <Text
        style={
          Object {
            "fontSize": 16,
            "fontWeight": "bold",
          }
        }
      >
        Question:
      </Text>
      <Text
        style={
          Object {
            "fontSize": 16,
            "height": 120,
          }
        }
      />
      <TextInput
        multiline={true}
        onChangeText={[Function]}
        placeholder="Write your answer here"
        style={
          Object {
            "borderBottomWidth": 1,
            "marginVertical": 20,
            "textAlign": "left",
          }
        }
      />
      <View
        accessibilityRole="button"
        accessible={true}
        collapsable={false}
        focusable={true}
        nativeID="animatedComponent"
        onClick={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "opacity": 1,
          }
        }
      >
        <View
          style={
            Array [
              Object {},
            ]
          }
        >
          <Text
            style={
              Array [
                Object {
                  "color": "#007AFF",
                  "fontSize": 18,
                  "margin": 8,
                  "textAlign": "center",
                },
                Object {
                  "color": "#f194ff",
                },
              ]
            }
          >
            Submit
          </Text>
        </View>
      </View>
      <View
        style={
          Object {
            "height": 12,
          }
        }
      />
    </RCTSafeAreaView>
  </View>
</Modal>
`;
